//Config file for aliqueit
//Mikael Klasson (mklasson at googles big mail thing)
//http://mklasson.com
[aliqueit]

//----------------------------------
//Operating system specific settings
//Defaults are for Windows
//----------------------------------

//Take out the trash if factorisation was successful.
ggnfs_clean_cmd = del cols*.* deps*.* factor.easy lpindex*.* rels*.* numFF.txt numrels.txt tmp.job spmat sp-index test.fb matsave matsave.bak test.dat*
//ggnfs_clean_cmd = rm -f cols*.* deps*.* factor.easy lpindex*.* rels*.* numFF.txt numrels.txt tmp.job spmat sp-index test.fb matsave matsave.bak test.dat*

//Null device (for redirecting unwanted output to).
//Windows uses "nul" and linux "/dev/null".
null_device = nul
//null_device = /dev/null

//Shell command to create a directory
makedir_cmd = mkdir



//----------------------------------
//Executables
//
//Note that you'll want to specify the full path and filename to the 
//executables unless they're in a directory included in your PATH environment 
//variable. This is especially true of msieve_cmd if you're going to use msieve 
//for poly finding. Just putting msieve in your aliqueit dir is not enough 
//because every gnfs run gets its own subdirectory and tries to start 
//msieve_cmd from there.
//----------------------------------

//Use yafu before msieve?
//prefer_yafu = false
prefer_yafu = true

//Name (and path, if needed) of your gmp-ecm executable.
ecm_cmd = ecm

//Name (and path, if needed) of your ecm.py executable.
ecmpy_cmd = python.exe ecm.py

//Name (and path, if needed) of your yafu executable.
yafu_cmd = yafu

//Name (and path, if needed) of your msieve executable.
msieve_cmd = msieve

//Name (and path, if needed) of your ggnfs executable.
ggnfs_cmd = c:\strawberry\perl\bin\perl.exe "c:\program files (x86)\ggnfs\bin\factMsieve.pl"



//----------------------------------
//General settings
//----------------------------------

//Use ecm.py (for easy ecm multithreading) instead of regular ecm?
use_ecmpy = false

//Use msieve to find a gnfs poly? If false, ggnfs will have to find its own.
use_msieve_polyfind = true

//Stop if sequence merges with an earlier sequence?
detect_merge = true

//Trial factor with primes < this value.
trial_cutoff = 10000

//Use GNFS for composites >= this many digits.
gnfs_cutoff = 89

//Don't show msieve/yafu output on screen for composites smaller than this limit (avoids screen spam).
hide_output_limit = 60

//Print a cheerful msg if an ecm factor with at least this many digits is found.
neat_factor_limit_ecm = 45

//Print a cheerful msg if a P-1 factor with at least this many digits is found.
neat_factor_limit_pm1 = 45

//Print a cheerful msg if a P+1 factor with at least this many digits is found.
neat_factor_limit_pp1 = 40



//----------------------------------
//Logging
//----------------------------------

//Save result output to this file + "<sequence_number>.elf"
result_file_prefix = alq_

//Save all log output from external programs to this file...
log_file = aliqueit.log
//  ...if this is true, otherwise discard it
save_log = true

//Temp file for ecm output. Moved to <log_file> after each run.
ecm_tempfile = aliqueit_ecm_temp.log



//----------------------------------
//ECM tuning
//----------------------------------

//ECM depth: comma-separated number pairs "<digits> <curves>". Used to select the number of curves to run.
//For a composite of x digits the highest pair whose <digits> element <= x is chosen.
//[gmp-]ecm is then run with #curves=<curves> ("-c <curves>") and B1 auto-increasing from 1 ("-I 1").
//20 curves ~ B1=7e3
//50 curves ~ B1=26e3
//100 curves ~ B1=78e3
//200 curves ~ B1=0.23e6
//300 curves ~ B1=0.44e6
//400 curves ~ B1=0.65e6
//500 curves ~ B1=0.88e6
//600 curves ~ B1=1.12e6
//700 curves ~ B1=1.38e6
//800 curves ~ B1=1.65e6
//1000 curves ~ B1=2.25e6
//For <65 digits I've experimentally found these values to be good on my machine. Improvements are always welcome!
//NOTE: These values are only used for composites < <big_ecm_cutoff> digits. See that setting below.
ecm_depth = 45 10, 50 15, 55 20, 60 30, 65 40, 70 60, 73 90, 76 120, 79 150, 82 180, 83 200, 86 300, 90 400, 93 500, 96 600, 99 700, 102 800, 106 900, 110 1000, 114 1100, 118 1200, 122 1300 

//If composite has more than <big_ecm_cutoff> digits, we will try to do ecm for about 1/4 of the estimated time qs/nfs would take.
//I've used logs of previous factorisations on my machine to construct the estimates that are used. They have been converted to 
//linear formulas taking the composite size as input and giving maximum factor size (see Table 1 in gmp-ecm readme) as output.
//See also qs_k, qs_m, gnfs_k, and gnfs_m below.
big_ecm_cutoff = 65

//Formulae used to determine the maximum factor size we will do ecm to.
//For QS: <qs_k> * input_digits + <qs_m>
qs_k = 0.448
qs_m = -11.26

//For GNFS: <gnfs_k> * input_digits + <gnfs_m>
gnfs_k = 0.235
gnfs_m = 9.4

//Multiply default B1 and B2 values by these constants for ECM. b2scale is 
//passed to gmp-ecm with the -B2scale argument and doesn't correspond exactly 
//to a B2 multiplication by this value.
b1scale_ecm = 1.0
b2scale_ecm = 1.0



//----------------------------------
//P-1/P+1 tuning
//----------------------------------
//Multiply default B1 and B2 values by these constants for P-1. b2scale is 
//passed to gmp-ecm with the -B2scale argument and doesn't correspond exactly 
//to a B2 multiplication by this value.
b1scale_pm1 = 1.0
b2scale_pm1 = 1.0

//Multiply default B1 and B2 values by these constants for P+1. b2scale is 
//passed to gmp-ecm with the -B2scale argument and doesn't correspond exactly 
//to a B2 multiplication by this value.
b1scale_pp1 = 1.0
b2scale_pp1 = 1.0
